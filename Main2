import tkinter as tk
from tkinter import messagebox, ttk
from datetime import datetime
import sqlite3
import pandas as pd

# اتصال به دیتابیس و ایجاد جداول کالاها و تراکنش‌ها (در صورت عدم وجود)
conn = sqlite3.connect("inventory.db")
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS items 
                  (id INTEGER PRIMARY KEY, name TEXT, details TEXT, unit TEXT, quantity INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS transactions 
                  (id INTEGER PRIMARY KEY, item_id INTEGER, type TEXT, amount INTEGER, 
                  description TEXT, date TEXT, FOREIGN KEY(item_id) REFERENCES items(id))''')
conn.commit()

# ساخت پنجره اصلی برنامه
root = tk.Tk()
root.title("برنامه انبارداری")
root.geometry("400x300")
root.configure(bg='#F0F0F0')

# تنظیم فونت فارسی و راست‌چین کردن
font_style = ("B Nazanin", 12)
button_options = {'padx': 20, 'pady': 10, 'anchor': 'e', 'font': font_style, 'bg': '#D5E4F2'}

# تابع نمایش لیست کالاها
def show_items():
    def load_items():
        # گرفتن اطلاعات کالاها از دیتابیس
        cursor.execute("SELECT * FROM items")
        items = cursor.fetchall()
        
        for row in tree.get_children():
            tree.delete(row)
        
        # گرفتن اطلاعات ورودی و خروجی هر کالا و محاسبه تعداد نهایی
        for item in items:
            item_id = item[0]
            cursor.execute("SELECT SUM(amount) FROM transactions WHERE item_id = ? AND type = 'ورودی'", (item_id,))
            total_input = cursor.fetchone()[0] or 0
            cursor.execute("SELECT SUM(amount) FROM transactions WHERE item_id = ? AND type = 'خروجی'", (item_id,))
            total_output = cursor.fetchone()[0] or 0
            final_quantity = item[4] + total_input - total_output
            
            tree.insert("", "end", values=(item[0], item[1], item[2], item[3], item[4], total_input, total_output, final_quantity))

    # ایجاد پنجره جدید برای نمایش لیست کالاها
    item_window = tk.Toplevel(root)
    item_window.title("لیست کالاها")
    item_window.geometry("800x400")

    # تنظیم جدول نمایش کالاها
    columns = ("شناسه", "نام کالا", "مشخصات ظاهری", "واحد", "تعداد اولیه", "تعداد ورودی", "تعداد خروجی", "تعداد نهایی")
    tree = ttk.Treeview(item_window, columns=columns, show="headings")
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, anchor="center")
    tree.pack(fill="both", expand=True)
    
    # بارگذاری داده‌ها
    load_items()

    # تابع برای ثبت ورودی جدید
    def add_input():
        def save_input():
            amount = int(entry_amount.get())
            description = entry_description.get()
            date = entry_date.get()

            cursor.execute("INSERT INTO transactions (item_id, type, amount, description, date) VALUES (?, ?, ?, ?, ?)",
                           (selected_item, 'ورودی', amount, description, date))
            conn.commit()
            transaction_window.destroy()
            load_items()
        
        selected_item = tree.item(tree.focus())['values'][0]
        transaction_window = tk.Toplevel(item_window)
        transaction_window.title("ورودی جدید")
        transaction_window.geometry("300x200")

        tk.Label(transaction_window, text="تعداد ورودی:", font=font_style).pack(pady=5)
        entry_amount = tk.Entry(transaction_window, font=font_style)
        entry_amount.pack(pady=5)

        tk.Label(transaction_window, text="توضیحات:", font=font_style).pack(pady=5)
        entry_description = tk.Entry(transaction_window, font=font_style)
        entry_description.pack(pady=5)

        tk.Label(transaction_window, text="تاریخ:", font=font_style).pack(pady=5)
        entry_date = tk.Entry(transaction_window, font=font_style)
        entry_date.insert(0, datetime.now().strftime("%Y-%m-%d"))
        entry_date.pack(pady=5)

        tk.Button(transaction_window, text="ثبت ورودی", command=save_input, font=font_style).pack(pady=20)

    # تابع برای ثبت خروجی جدید
    def add_output():
        def save_output():
            amount = int(entry_amount.get())
            description = entry_description.get()
            date = entry_date.get()

            cursor.execute("INSERT INTO transactions (item_id, type, amount, description, date) VALUES (?, ?, ?, ?, ?)",
                           (selected_item, 'خروجی', amount, description, date))
            conn.commit()
            transaction_window.destroy()
            load_items()
        
        selected_item = tree.item(tree.focus())['values'][0]
        transaction_window = tk.Toplevel(item_window)
        transaction_window.title("خروجی جدید")
        transaction_window.geometry("300x200")

        tk.Label(transaction_window, text="تعداد خروجی:", font=font_style).pack(pady=5)
        entry_amount = tk.Entry(transaction_window, font=font_style)
        entry_amount.pack(pady=5)

        tk.Label(transaction_window, text="توضیحات:", font=font_style).pack(pady=5)
        entry_description = tk.Entry(transaction_window, font=font_style)
        entry_description.pack(pady=5)

        tk.Label(transaction_window, text="تاریخ:", font=font_style).pack(pady=5)
        entry_date = tk.Entry(transaction_window, font=font_style)
        entry_date.insert(0, datetime.now().strftime("%Y-%m-%d"))
        entry_date.pack(pady=5)

        tk.Button(transaction_window, text="ثبت خروجی", command=save_output, font=font_style).pack(pady=20)

    # تابع برای ساخت اکسل تکی هر کالا
    def export_single_excel():
        cursor.execute("SELECT * FROM items")
        items = cursor.fetchall()
        for item in items:
            item_id = item[0]
            cursor.execute("SELECT * FROM transactions WHERE item_id = ?", (item_id,))
            transactions = cursor.fetchall()
            df = pd.DataFrame(transactions, columns=["شناسه", "کد کالا", "نوع", "تعداد", "توضیحات", "تاریخ"])
            df.to_excel(f"{item[1]}_transactions.xlsx", index=False)
        messagebox.showinfo("اکسل", "فایل‌های اکسل کالاها با موفقیت ذخیره شد!")

    # دکمه‌های عملیات
    tk.Button(item_window, text="ورودی جدید", command=add_input, font=font_style).pack(side="left", padx=10, pady=10)
    tk.Button(item_window, text="خروجی جدید", command=add_output, font=font_style).pack(side="left", padx=10, pady=10)
    tk.Button(item_window, text="دریافت اکسل تکی", command=export_single_excel, font=font_style).pack(side="left", padx=10, pady=10)

# دکمه‌ها در پنجره اصلی
btn_show_items = tk.Button(root, text="نمایش لیست کالاها", command=show_items, **button_options)
btn_add_item = tk.Button(root, text="وارد کردن کالای جدید", font=font_style, bg='#D5E4F2')
btn_export_excel = tk.Button(root, text="خروجی اکسل کلی", font=font_style, bg='#D5E4F2')

btn_show_items.pack(fill='x', pady=5, padx=10, anchor='e')
btn_add_item.pack(fill='x', pady=5, padx=10, anchor='e')
btn_export_excel.pack(fill='x', pady=5, padx=10, anchor='e')

# شروع حلقه اصلی برنامه
root.mainloop()
conn.close()