# secp256k1 constants
P = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
A, B = 0, 7
Gx = 55066263022277343669578718895168534326250603453777594175500187360389116729240
Gy = 32670510020758816978083085130507043184471273380659243275938904335757337482424
G = (Gx, Gy)

small_moduli = [
    4294967291, 4294967279, 4294967231, 4294967197, 4294967189, 4294967187,
]

def mod_inv(a, p):
    return pow(a, p-2, p)

def point_add(p_mod, P, Q):
    if P is None: return Q
    if Q is None: return P
    x1, y1 = P
    x2, y2 = Q
    if x1 == x2 and y1 != y2:
        return None
    if x1 == x2:
        l = (3 * x1 * x1) * mod_inv(2 * y1, p_mod)
    else:
        l = (y2 - y1) * mod_inv(x2 - x1, p_mod)
    l %= p_mod
    x3 = (l*l - x1 - x2) % p_mod
    y3 = (l*(x1 - x3) - y1) % p_mod
    return (x3, y3)

def scalar_mult(p_mod, k, P):
    result = None
    addend = P
    while k > 0:
        if k & 1:
            result = point_add(p_mod, result, addend)
        addend = point_add(p_mod, addend, addend)
        k >>= 1
    return result

def is_on_curve(p_mod, P):
    if P is None:
        return False
    x, y = P
    return (y*y - (x*x*x + A*x + B)) % p_mod == 0

def fold_point(P, modulus):
    x, y = P
    return (x % modulus, y % modulus)

def brute_force_dlog(p_mod, G_folded, Q_folded, max_tries=100000):
    R = None
    for d in range(max_tries):
        if R == Q_folded:
            return d
        R = point_add(p_mod, R, G_folded)
    return None

def test_moduli_bruteforce(d_input):
    print(f"\n[*] Brute Force Test for d = {d_input}\n")

    Q = scalar_mult(P, d_input, G)

    success = 0
    total_bits = 0

    for mod in small_moduli:
        G_folded = fold_point(G, mod)
        Q_folded = fold_point(Q, mod)

        if not is_on_curve(mod, G_folded):
            print(f"[x] mod {mod} ❌ G_folded not on curve")
            continue
        if not is_on_curve(mod, Q_folded):
            print(f"[x] mod {mod} ❌ Q_folded not on curve")
            continue

        d_mod = brute_force_dlog(mod, G_folded, Q_folded, max_tries=100000)
        if d_mod == (d_input % mod):
            print(f"[✓] mod {mod} ✅ SUCCESS — Found correct d mod {mod} = {d_mod}")
            total_bits += mod.bit_length()
            success += 1
        elif d_mod is not None:
            print(f"[~] mod {mod} ⚠️ WRONG result — Got d ≡ {d_mod} mod {mod}, expected {d_input % mod}")
        else:
            print(f"[ ] mod {mod} ❓ Brute force failed")

    print(f"\n[!] Total successful moduli: {success}")
    print(f"[!] Total bits of information collected: {total_bits}\n")

if __name__ == "__main__":
    test_moduli_bruteforce(1)
    test_moduli_bruteforce(2)
    test_moduli_bruteforce(3)
    test_moduli_bruteforce(10)