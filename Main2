import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
import jdatetime
import pandas as pd

# اتصال به دیتابیس SQLite
conn = sqlite3.connect("inventory.db")
c = conn.cursor()

# ساخت جداول
c.execute('''CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                quantity INTEGER DEFAULT 0
             )''')

c.execute('''CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id INTEGER,
                change INTEGER,
                date TEXT,
                FOREIGN KEY (product_id) REFERENCES products (id)
             )''')

conn.commit()

# تابع ثبت کالای جدید
def add_product():
    name = entry_name.get()
    description = entry_description.get()
    quantity = int(entry_quantity.get())
    if name and quantity >= 0:
        c.execute("INSERT INTO products (name, description, quantity) VALUES (?, ?, ?)", (name, description, quantity))
        conn.commit()
        messagebox.showinfo("موفقیت", "کالا با موفقیت اضافه شد.")
        entry_name.delete(0, tk.END)
        entry_description.delete(0, tk.END)
        entry_quantity.delete(0, tk.END)
        load_products()
    else:
        messagebox.showwarning("خطا در ورود اطلاعات", "لطفا تمام فیلدها را به درستی پر کنید.")

# تابع مشاهده لیست کالاها
def load_products():
    for item in tree.get_children():
        tree.delete(item)
    c.execute("SELECT * FROM products")
    for row in c.fetchall():
        tree.insert("", "end", values=row)

# تابع ورود و خروج کالا
def update_quantity(change):
    selected = tree.focus()
    if not selected:
        messagebox.showwarning("خطا در انتخاب", "لطفا یک کالا را انتخاب کنید.")
        return
    item = tree.item(selected)["values"]
    product_id = item[0]
    date = jdatetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_quantity = item[3] + change
    if new_quantity < 0:
        messagebox.showwarning("خطا در موجودی", "موجودی کافی نیست.")
        return
    c.execute("UPDATE products SET quantity = ? WHERE id = ?", (new_quantity, product_id))
    c.execute("INSERT INTO transactions (product_id, change, date) VALUES (?, ?, ?)", (product_id, change, date))
    conn.commit()
    load_products()

# تابع خروجی به اکسل
def export_to_excel():
    c.execute("SELECT products.name, products.description, transactions.change, transactions.date FROM transactions INNER JOIN products ON transactions.product_id = products.id")
    data = c.fetchall()
    df = pd.DataFrame(data, columns=["نام کالا", "توضیحات", "تغییرات", "تاریخ"])
    df.to_excel("inventory.xlsx", index=False)
    messagebox.showinfo("خروجی", "داده‌ها با موفقیت به فایل inventory.xlsx خروجی شدند.")

# رابط کاربری
root = tk.Tk()
root.title("سیستم مدیریت انبار")

# فیلدهای ورودی کالا
tk.Label(root, text="نام کالا:").grid(row=0, column=0)
entry_name = tk.Entry(root)
entry_name.grid(row=0, column=1)

tk.Label(root, text="توضیحات:").grid(row=1, column=0)
entry_description = tk.Entry(root)
entry_description.grid(row=1, column=1)

tk.Label(root, text="تعداد اولیه:").grid(row=2, column=0)
entry_quantity = tk.Entry(root)
entry_quantity.grid(row=2, column=1)

btn_add = tk.Button(root, text="افزودن کالا", command=add_product)
btn_add.grid(row=3, column=1)

# جدول لیست کالاها
columns = ("شناسه", "نام", "توضیحات", "موجودی")
tree = ttk.Treeview(root, columns=columns, show="headings")
for col in columns:
    tree.heading(col, text=col)
tree.grid(row=4, column=0, columnspan=3)

# دکمه‌های ورود و خروج کالا
btn_in = tk.Button(root, text="افزایش موجودی", command=lambda: update_quantity(1))
btn_in.grid(row=5, column=0)

btn_out = tk.Button(root, text="کاهش موجودی", command=lambda: update_quantity(-1))
btn_out.grid(row=5, column=1)

# دکمه خروجی اکسل
btn_export = tk.Button(root, text="خروجی به اکسل", command=export_to_excel)
btn_export.grid(row=5, column=2)

load_products()

root.mainloop()